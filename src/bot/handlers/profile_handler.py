from typing import Dict, Any, Callable, Awaitable

from aiogram import Router, BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from bot.sql.users import check_if_user_exists, add_user

router = Router()

class UnregisteredMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        pass

    async def __call__(
            self,
            handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any]
    ):

        user_id = event.from_user.id
        if not await check_if_user_exists(user_id) and event.text != "/start":
            await event.answer("–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–∂–¥–µ, —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        return await handler(event, data)

router.message.outer_middleware(UnregisteredMiddleware())


@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id

    if not await check_if_user_exists(user_id):
        chat_id = message.chat.id
        username = message.from_user.username
        await add_user(user_id, chat_id, username)

    text = '''
üìö –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–±–µ –∫–Ω–∏–≥–∏ —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π!

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Å—é–¥–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

<b>–ü—Ä–∏–º–µ—Ä:</b>
<i>–•–æ—á—É —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –∂–∞–Ω—Ä–µ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏, –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ—Å–ª–µ 2000 –≥–æ–¥–∞.</i>
'''

    await message.answer(text, parse_mode=ParseMode.HTML)
