from ast import literal_eval

from aiogram import Router, Bot
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import errors
from bot.books_core.RAG import write_book_blurbs
from bot.books_core.get_books import get_books
from bot.errors import NoAvailableApis
from bot.sql.users import get_user_setting
from bot.utils.audio_to_text import audio_to_text
from bot.utils.log_utils import get_user_logger

router = Router()

class BooksHandlerStates(StatesGroup):
    clarify = State()


async def write_answer(message: Message, text: str, user_id: int, state: FSMContext, clarify: bool = False):
    logger = get_user_logger(user_id)
    logger.info("write_answer start...")

    start_message = await message.answer("‚è≥ –î—É–º–∞–µ–º, –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –≤–∞–º –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—É—Ç...")

    try:
        logger.info("awaiting books...")
        books = await get_books(text, user_id, clarify)
        logger.info(f"books got: {books}")
    except errors.NeedToClarifyError:
        logger.warning("need to clarify...")
        await start_message.edit_text("üîç –ö–∞–∂–µ—Ç—Å—è, –Ω–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
        # await state.set_state(BooksHandlerStates.clarify)
    except errors.NoAvailableApis:
        logger.warning("server is overloaded, need to wait...")
        await start_message.edit_text("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...")
    except Exception as exception:
        logger.error(f"Unhandled error: {repr(exception)}")
        await start_message.edit_text("üõ†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
    else:
        keyboard_builder = InlineKeyboardBuilder()
        keyboard_builder.button(text="üîç –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="add_descriptions")

        ans_text = "–•–æ—Ä–æ—à–æ, –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—é –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è!\n"
        for i, book in enumerate(books):
            ans_text += f'''
üìñ –ö–Ω–∏–≥–∞: <b>{book["title"]}</b>
üé≠ –ñ–∞–Ω—Ä(-—ã): <b>{book["genre"]}</b>
üë§ –ê–≤—Ç–æ—Ä(-—ã): <b>{book["author"]}</b>
‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{str(book["rating"]).replace(".0", "")} –∏–∑ 5</b>
üìÑ –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{int(book["volume"])}</b>

üõí –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ –ø–æ <a href="{book["litres_url"]}">—Å—Å—ã–ª–∫–µ</a>
'''
            if "price" in book:
                ans_text += f'''
üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫–Ω–∏–≥–∏ –Ω–∞ Litres: {book["price"]}‚ÇΩ.
'''
            ans_text += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" if i < len(books) - 1 else ""

        ans_text += '''

<i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–Ω–∏–≥–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.</i>
'''
        await state.clear()
        await start_message.edit_text(ans_text,
                             reply_markup=keyboard_builder.as_markup(),
                             parse_mode=ParseMode.HTML,
                             disable_web_page_preview=True)
    logger.info("write_answer end...")

#_______________________
# –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
#_______________________
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#_______________________
@router.message(F.text, StateFilter(None))
async def text_message_start(message: Message, state: FSMContext):
    text = message.text
    await write_answer(message, text, message.from_user.id, state)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(F.voice, StateFilter(None))
async def voice_message_start(message: Message, bot: Bot, state: FSMContext):
    text = ""
    try:
        text = await audio_to_text(bot, message.voice.file_id)
    except errors.EmptyVoiceError:
        await message.answer("‚ö†Ô∏è –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        return

    await write_answer(message, text, message.from_user.id, state)
#_______________________


#_______________________
# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
#_______________________
# @router.message(F.text, StateFilter(BooksHandlerStates.clarify))
# async def text_message_clarify(message: Message, state: FSMContext):
#     text = message.text
#     await write_answer(message, text, message.from_user.id, state, True)
#
# @router.message(F.voice, StateFilter(BooksHandlerStates.clarify))
# async def voice_message_clarify(message: Message, bot: Bot, state: FSMContext):
#     text = await audio_to_text(bot, message.voice.file_id)
#     await write_answer(message, text, message.from_user.id, state, True)
#_______________________

#_______________________
# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
#_______________________

@router.callback_query(F.data == "add_descriptions")
async def add_descriptions(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger = get_user_logger(user_id)
    logger.info("add_descriptions start...")
    if callback.message is None:
        logger.warning("callback.message is None")
        logger.info("add_descriptions end...")
        return

    try:
        current_books = literal_eval(str(await get_user_setting(user_id, "books_data")))
        current_user_request = await get_user_setting(user_id, "user_request")
    except errors.CheckUserError:
        logger.error("CheckUserError...")
        logger.info("add_descriptions end...")
        return

    if current_books is None or current_user_request is None:
        await callback.anwser("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π...")
        logger.error("error getting descriptions...")
        return

    try:
        full_books_data = await write_book_blurbs(current_books, current_user_request, user_id)
    except NoAvailableApis:
        await callback.answer()
        await callback.message.edit_text("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞... ",
                                         parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        return

    ans_text = "–•–æ—Ä–æ—à–æ, –≤–æ—Ç –∫–Ω–∏–≥–∏ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏:\n"
    for i, book in enumerate(full_books_data):
        ans_text += f'''
üìñ –ö–Ω–∏–≥–∞: <b>{book["title"]}</b>
üé≠ –ñ–∞–Ω—Ä(-—ã): <b>{book["genre"]}</b>
üë§ –ê–≤—Ç–æ—Ä(-—ã): <b>{book["author"]}</b>
‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{str(book["rating"]).replace(".0", "")} –∏–∑ 5</b>
üìÑ –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{int(book["volume"])}</b>
üí≠ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{book["blurb"]}</b>

üõí –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ –ø–æ <a href="{book["litres_url"]}">—Å—Å—ã–ª–∫–µ</a>
'''

        if "price" in book:
            ans_text += f'''
üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫–Ω–∏–≥–∏ –Ω–∞ Litres: {book["price"]}‚ÇΩ.
'''

        ans_text += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" if i < len(full_books_data) - 1 else ""

    await callback.answer()
    await callback.message.edit_text(ans_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    logger.info("add_descriptions end...")
#_______________________